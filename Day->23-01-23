1. Longest Substring Without Repeating Characters
class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        k=0
        a=""
        for i in s:
            if i not in a:
                a+=i
                
            else:
                a=a[a.index(i)+1:]+i
            k=max(k,len(a))
        if(len(s)==0):
            return 0
        return k
----------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------

First Unique Character in a String
class Solution {
    public int firstUniqChar(String s) {
        Map<Character,Integer>a=new LinkedHashMap<>();
        for(int i=0;i<s.length();i++){
            if(a.containsKey(s.charAt(i))){
                a.put(s.charAt(i),a.get(s.charAt(i))+1);
            }
            else{
                a.put(s.charAt(i),1);
            }
        }
        
        Set<Character> keys =a.keySet();
        for(Character i:keys){
            if (a.get(i)==1){
                return s.indexOf(i);
            }
        }
        
            return -1;
        
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
3. Minimum Window Substring
class Solution:
    def minWindow(self, s: str, t: str) -> str:
        d1=Counter(t)
        length=len(set(t))
        st=0
        en=0
        fi=-1
        fj=len(s)
        while True:
            if en < len(s) and length > 0:
                d1[s[en]] -= 1
                if d1[s[en]] == 0: length -= 1
                en += 1
            elif st < len(s) and length <= 0:
                if en-st < fj-fi: fj, fi = en, st
                if d1[s[st]] == 0: length += 1
                d1[s[st]] += 1
                st += 1
            else:
                break
        return s[fi:fj] if fi >= 0 else ""
